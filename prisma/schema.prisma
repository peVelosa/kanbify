generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]

  password String?

  boards         Board[]
  collaborations Collaborator[]
}

model Board {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  title String

  columns       Column[]
  collaborators Collaborator[]
}

enum ROLE {
  OWNER
  ADMIN
  EMPLOYEE
  VISIT
}

model Collaborator {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [user_id], references: [id])
  user_id  String
  board    Board  @relation(fields: [board_id], references: [id])
  board_id String

  role ROLE @default(EMPLOYEE)

  cards    Card[]
  tasks    Task[]
  comments Comment[]
}

model Column {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board    Board  @relation(fields: [board_id], references: [id])
  board_id String

  title String
  order Int

  cards Card[]
}

model Card {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  column       Column        @relation(fields: [column_id], references: [id])
  column_id    String
  assign_to    Collaborator? @relation(fields: [assign_to_id], references: [id])
  assign_to_id String?

  title String
  body  String?
  order Int

  tasks   Task[]
  Comment Comment[]
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assign_to    Collaborator? @relation(fields: [assign_to_id], references: [id])
  assign_to_id String?

  card    Card   @relation(fields: [card_id], references: [id])
  card_id String

  title String
  done  Boolean @default(false)
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card         Card         @relation(fields: [card_id], references: [id])
  card_id      String
  assign_to    Collaborator @relation(fields: [assign_to_id], references: [id])
  assign_to_id String

  body String
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
